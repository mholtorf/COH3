---
title: "Central Oregon Hashes"
output: blastula::blastula_email
editor: visual
format: 
  html:
    theme: 
    - default
    - coh3_theme.scss
---
# Central Oregon Hashes
```{r}
#| echo: false
#| warning: false

# This code uses the 'ical' library to parse events from a Google Calendar and perform various data manipulations. Install from GitHub as the CRAN version does not import creation dates.
# Ensure that the 'ical' and 'tidyverse' libraries are installed before running this code.

# remotes::install_github("petermeissner/ical")

library("ical") 
library("tidyverse")

# Parse events from the specified Google Calendar URL
events <- ical_parse_df("https://calendar.google.com/calendar/ical/6ureum96qhgf13kj820i61ovq8%40group.calendar.google.com/public/basic.ics")

 # events <- ical_parse_df("https://calendar.google.com/calendar/ical/cae3r4u2uhucmmi9rvq5eu6obg%40group.calendar.google.com/public/basic.ics")

# Data manipulation: 
# - Replace newline characters in the description with '<br>'
# - Extract day, date, time, and location information
# - Set default values for missing location and description
# - Sort events by start date
events <- 
  events %>%
  mutate(description = gsub("\n", "<br>", description),
         day = as.character(wday(dtstart, label = TRUE, abbr = FALSE)),
         date = format(dtstart, format = "%B %d"),
         time = format(dtstart, format = "%I:%M %p"),
         location = if_else(is.na(location), "TBD", location),
         description = if_else(is.na(description), "Details to follow", description)) %>%
  arrange(dtstart)

# Identify events triggering in 10 days
trigger <- 
  events %>%
  filter(difftime(as.Date(dtstart), as.Date(Sys.Date()), units = "days") == 10)

# Identify events with updates:
# - Upcoming events within the next 10 days
# - Events with new updates in the last 24 hours
updates <- 
  events %>%
  filter(dtstart > Sys.Date(),
         difftime(as.Date(dtstart), as.Date(Sys.Date()), units = "days") < 10 &
         difftime(last.modified, Sys.Date(), units = "hours") > -24)

# Identify events happening next week:
# - Future events within the next 10 days
# - Exclude events already marked with updates
nextweek <- 
  events %>%
  filter(as.Date(dtstart) > Sys.Date() &
         difftime(as.Date(dtstart), as.Date(Sys.Date()), units = "days") <= 10 &
         !uid %in% updates$uid) 

# Identify events happening 10 days from now
upcoming <- 
  events %>%
  filter(dtstart >= Sys.Date() + 10)

```


```{r}
#| echo: FALSE
#| results: 'asis'

# Display updates information if there are any updates
if(nrow(updates) > 0) {
  cat('### ‚ö†Ô∏è Late breaking updates!')
  cat('  \n')
  cat("Sometimes plans change, details are missed, or cool things come together at the last minute.  Here are updates we didn't want you to miss.")

  # Iterate through each update and format the display
  for (i in 1:nrow(updates)) {
    # Display the event summary with bold orange color
    cat('  \n')
    cat(paste0("  \n", 
               '<span style="color:#8E2600;font-weight:bold">',
               updates[i, "summary"],
               '</span>'))
    
    # Display event details including date, time, location, and description
    cat("  \n", "**Date:**", updates[i, "day"], updates[i, "date"])
    cat("  \n", "**Time:**", updates[i, "time"])
    cat("  \n", "**Where:**", updates[i, "location"])
    cat("  \n\n", updates[i, "description"])
    cat('\n')
  }
  cat('---')
}

```



```{r}
#| echo: FALSE
#| results: 'asis'

# Display upcoming events information if there are any events next week
if(nrow(nextweek) > 0) {
  cat('### üë£ Cumming soon...')

  # Iterate through each upcoming event and format the display
  for (i in 1:nrow(nextweek)) {
    # Display the event summary with bold orange color
    cat('  \n')
    cat(paste0("  \n", 
               '<span style="color:#8E2600;font-weight:bold">',
               nextweek[i, "summary"],
               '</span>'))
    
    # Display event details including date, time, location, and description
    cat("  \n", "**Date:**", nextweek[i, "day"], nextweek[i, "date"])
    cat("  \n", "**Time:**", nextweek[i, "time"])
    cat("  \n", "**Where:**", nextweek[i, "location"])
    cat("  \n\n", nextweek[i, "description"])
    cat('\n')
  }
  cat('---')
}

```

### üìÜ More shenanigans ahead! 
<sub>*(head? who said head??)*<sub>

```{r}
#| echo: FALSE
#| results: 'asis'
# Display information for upcoming events if there are any
if(nrow(upcoming) > 0) {
  cat('\n')
  cat('\n')
  
  # Iterate through each upcoming event and format the display
  for (i in 1:nrow(upcoming)) {
    cat('\n')
    
    # Display the event summary with bold red color
    cat(paste0("  \n", 
               '<span style="color:#8E2600;font-weight:bold">',
               upcoming[i, "summary"],
               '</span>'))
    
    # Display event details including date, time, location, and description
    cat("  \n", "**Date:**", upcoming[i, "day"], upcoming[i, "date"])
    cat("  \n", "**Time:**", upcoming[i, "time"])
    cat("  \n", "**Where:**", upcoming[i, "location"])
    cat("  \n\n", upcoming[i, "description"])
    cat('\n')
  }
} else {
  # Display a message if there are no other upcoming events
  cat("No other upcoming events. [Sign up to hare!](mailto:centraloregonhash@gmail.com?subject=Interested%20in%20haring)")
}

```

---

> For up to the minute detrails, add the COH3 calendar to your own calendar using [Google](https://calendar.google.com/calendar/u/0/r?cid=6ureum96qhgf13kj820i61ovq8@group.calendar.google.com) or [iCal](https://calendar.google.com/calendar/ical/6ureum96qhgf13kj820i61ovq8%40group.calendar.google.com/public/basic.ics) for iOS users. Or join us on [Facebook](https://www.facebook.com/groups/527235744035261/). 
